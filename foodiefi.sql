SELECT *
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS
AS A 
INNER JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS B
ON A.PLAN_ID = B.PLAN_ID

WHERE CUSTOMER_ID = 1 OR CUSTOMER_ID = 2 OR CUSTOMER_ID = 11 OR CUSTOMER_ID = 13 OR
CUSTOMER_ID = 15 OR CUSTOMER_ID = 16 OR CUSTOMER_ID = 18 OR CUSTOMER_ID = 19;
-- Customer 1 joined on trial then downgraded to basic membership
-- Customer 2 joined trial then didnt downgrade/upgrade and went to pro annual
-- Customer 11 tried the trial and cancelled
-- Customer 13 started with trial changed subscription to basic then a week later upgraded to pro monthly
-- Customer 15 started trial changed to pro monthly when trial ended then 5 days later cancelled the membership
-- Customer 16 started trial changed to basic then upgraded to pro annual 4 months and 2 weeks later
-- Customer 18 started trial then changed to pro monthly
-- Customer 19 started trial then pro monthly then 2 months later upgraded to pro annual

//Section B

// QUESTION 1
SELECT count( DISTINCT customer_id) as "Number of Customers"
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS;

//QUESTION 2
SELECT date_part(month,start_date) AS MONTH,
COUNT(CUSTOMER_ID)
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS
AS A 
INNER JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS B
ON A.PLAN_ID = B.PLAN_ID
WHERE PLAN_NAME = 'trial'
GROUP BY MONTH;

//QUESTION 3

SELECT COUNT(DISTINCT CUSTOMER_ID),PLAN_NAME
FROM(
SELECT YEAR(START_DATE) AS YEAR,CUSTOMER_ID,PLAN_NAME
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS
AS A
INNER JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS B ON A.PLAN_ID = B.PLAN_ID)
WHERE YEAR > 2020
GROUP BY PLAN_NAME;

don't need to create a column can just filter by the calculation, Alternative below and is quicker

SELECT COUNT(DISTINCT CUSTOMER_ID),PLAN_NAME
FROM(
TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS
AS A
INNER JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS B ON A.PLAN_ID = B.PLAN_ID)
WHERE YEAR(START_DATE) > 2020
GROUP BY PLAN_NAME;

//QUESTION 4

SELECT 
COUNT(DISTINCT CUSTOMER_ID) as "CHURNED CUSTOMERS",
(SELECT COUNT(DISTINCT CUSTOMER_ID)
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS) as "TOTAL CUSTOMERS"

FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS
WHERE plan_id = 4;

// QUESTION 5

SELECT SUM(CANCEL_AFTER_TRIAL) AS NUMBER_WHO_CANCELLED_STRAIGHT_AWAY, FLOOR((NUMBER_WHO_CANCELLED_STRAIGHT_AWAY/COUNT(DISTINCT CD))*100) AS PERCENT_CANCELLED
FROM(
WITH T2 AS(
SELECT *, ROW_NUMBER() OVER(ORDER BY CUSTOMER_ID,START_DATE ASC ) +1 AS RN2, PLAN_ID AS PLAN_CURRENT, START_DATE AS SD2,CUSTOMER_ID AS CD
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS)
,
T1 AS(SELECT *, ROW_NUMBER() OVER(ORDER BY CUSTOMER_ID,START_DATE ASC ) AS RN,PLAN_ID AS NEXT_PLAN,START_DATE AS SD1,CUSTOMER_ID AS CD2
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS) 

SELECT PLAN_CURRENT,CD,NEXT_PLAN,
CASE 
WHEN PLAN_CURRENT = 0 AND NEXT_PLAN = 4 THEN 1
ELSE 0 END AS CANCEL_AFTER_TRIAL
FROM T2 
INNER JOIN T1 ON T1.RN = T2.RN2);

//SHOWS HOW YOU CAN CREATE GROUP BY ID FIELD IN SQL
-- WITH CTE AS(SELECT 
-- customer_id,PLAN_NAME,
-- ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY start_date ASC) as rn
-- FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS as S
-- INNER JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS as P on S.plan_id = P.plan_id
-- )
-- SELECT 
-- COUNT(DISTINCT customer_id) as churned_afer_trial_customers,
-- ROUND((COUNT(DISTINCT customer_id) / (SELECT COUNT(DISTINCT customer_id) FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS))*100,0) as percent_churn_after_trial
-- FROM CTE
-- WHERE rn = 2
-- AND plan_name = 'churn';

//QUESTION 6
// this is because it was joining ctes together Can't make it a subquery and call the number from the CTE e.g ROUND((COUNT(CD2) / (SELECT COUNT(DISTINCT CD2) FROM T1))*100,1)

WITH T2 AS(
SELECT *, ROW_NUMBER() OVER(ORDER BY CUSTOMER_ID,START_DATE ASC ) +1 AS RN2, PLAN_ID AS PLAN_CURRENT, START_DATE AS SD2,CUSTOMER_ID AS CD
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS)
,

T1 AS(SELECT *, ROW_NUMBER() OVER(ORDER BY CUSTOMER_ID,START_DATE ASC ) AS RN,PLAN_ID AS NEXT_PLAN,START_DATE AS SD1,CUSTOMER_ID AS CD2
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS) 

SELECT
ROUND((COUNT(CD2) / (SELECT COUNT(DISTINCT CD2) FROM T1))*100,1) AS PERCENT_MEMEBERSHIP,
COUNT(DISTINCT CD) AS NUMBER_CUSTOMERS,
CASE 
WHEN PLAN_CURRENT = 0 AND NEXT_PLAN = 1 THEN 'BASIC'
WHEN PLAN_CURRENT = 0 AND NEXT_PLAN = 2 THEN 'PRO_MONTH'
WHEN PLAN_CURRENT = 0 AND NEXT_PLAN = 3 THEN 'PRO_ANNUAL'
WHEN PLAN_CURRENT = 0 AND NEXT_PLAN = 4 THEN 'CHURN'
ELSE NULL END AS NEXT_MEMBERSHIP
FROM T2 
INNER JOIN T1 ON T1.RN = T2.RN2
WHERE NEXT_MEMBERSHIP IS NOT NULL
GROUP BY NEXT_MEMBERSHIP;

//Question 7

WITH T2 AS(
SELECT *
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS)

SELECT PLAN_NAME, SUM(CURRENT_PLAN),ROUND(SUM(CURRENT_PLAN)/(SELECT COUNT( DISTINCT CUSTOMER_ID) FROM T2)*100,1) AS PERCENT_PLAN
FROM(
SELECT PLAN_NAME,
LAST_VALUE(START_DATE) OVER (PARTITION BY CUSTOMER_ID ORDER BY START_DATE ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LASTVAL,
CASE
WHEN START_DATE = LASTVAL THEN 1
ELSE 0 END AS CURRENT_PLAN
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS A
INNER JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS B ON A.PLAN_ID = B.PLAN_ID
WHERE START_DATE <= '2020-12-31')
GROUP BY PLAN_NAME;

// QUESTION 8

SELECT SUM(UPGRADE)
FROM(
SELECT A.PLAN_ID,PLAN_NAME,CUSTOMER_ID, ROW_NUMBER() OVER (PARTITION BY CUSTOMER_ID ORDER BY CUSTOMER_ID,START_DATE ASC) AS RN,
CASE 
WHEN RN > 1 AND A.PLAN_ID = 3 THEN 1
ELSE 0 END AS UPGRADE
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS A
INNER JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS B ON A.PLAN_ID = B.PLAN_ID
WHERE START_DATE <= '2020-12-31'
);
// QUESTION 9
-- WITH TE AS(
-- SELECT *
-- FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS A
-- INNER JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS B ON A.PLAN_ID = B.PLAN_ID
-- WHERE A.PLAN_ID = 0)
-- ,
-- TE2 AS (SELECT *
-- FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS S
-- WHERE PLAN_ID = 3)

-- SELECT 
SELECT ROUND(AVG(DAYDIFF),0)
FROM(
SELECT DATEDIFF('days',JOIN_DATE,START_DATE) AS DAYDIFF
FROM(
SELECT *
FROM 
(SELECT A.CUSTOMER_ID AS CUSTOMER,A.START_DATE AS JOIN_DATE,A.PLAN_ID
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS A
INNER JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS B ON A.PLAN_ID = B.PLAN_ID
WHERE A.PLAN_ID = 0) AS C

INNER JOIN

(SELECT *
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS S
WHERE PLAN_ID = 3) AS D

ON CUSTOMER = D.CUSTOMER_ID));


// QUESTION 10

SELECT COUNT(DAYDIFF),DATEDIFFBINS
FROM(
SELECT DATEDIFF('days',JOIN_DATE,START_DATE) AS DAYDIFF,
CASE 
WHEN DAYDIFF BETWEEN 0 AND 30 THEN '0-30 DAY BIN'
WHEN DAYDIFF BETWEEN 31 AND 60 THEN '30-60 DAY BIN'
WHEN DAYDIFF BETWEEN 61 AND 90 THEN '60-90 DAY BIN'
ELSE 'OTHER' END AS DATEDIFFBINS 
FROM(
SELECT *
FROM 
(SELECT A.CUSTOMER_ID AS CUSTOMER,A.START_DATE AS JOIN_DATE,A.PLAN_ID
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS A
INNER JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS B ON A.PLAN_ID = B.PLAN_ID
WHERE A.PLAN_ID = 0) AS C

INNER JOIN

(SELECT *
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS S
WHERE PLAN_ID = 3) AS D

ON CUSTOMER = D.CUSTOMER_ID))
GROUP BY DATEDIFFBINS;

// QUESTION 11
SELECT COUNT(CUSTOMER)
FROM(
WITH T1 AS(
SELECT START_DATE AS BASICDATE,PLAN_ID,CUSTOMER_ID AS CUSTOMER
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS
WHERE PLAN_ID = 1
)
,
T2 AS (
SELECT START_DATE AS PRODATE,PLAN_ID,CUSTOMER_ID
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS
WHERE PLAN_ID = 2
)

SELECT *
FROM T1
INNER JOIN T2 ON CUSTOMER = T2.CUSTOMER_ID
WHERE BASICDATE > PRODATE 
AND DATE_PART('YEAR',BASICDATE) = 2020);